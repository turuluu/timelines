name: build-timelines

on:
  push:
    branches: [ "github_ci" ]
  # pull_request:
  #   branches: [ "master" ]

jobs:
  job:
    name: ${{ matrix.platform }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-15 ]
    #env:
    #  VCPKG_INSTALLED_DIR: '${{ github.workspace }}/deps/vcpkg_installed/${{ matrix.platform }}'
    #  VCPKG_DEFAULT_TRIPLET: '${{ matrix.triplet }}'
    #  VCPKG_DEFAULT_HOST_TRIPLET: '${{ matrix.triplet }}'
    #  VCPKG_OVERLAY_TRIPLETS: '${{ github.workspace }}/overlay/triplets'

    steps:
      - uses: actions/checkout@v4

      - name: Setup XCode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Brew install
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install autoconf-archive automake libtool md4c
          fi
        shell: bash

      - uses: lukka/get-cmake@latest

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
        with:
         vcpkgDirectory: '${{ github.workspace }}/deps/vcpkg'
         vcpkgJsonGlob: 'vcpkg.json'
         runVcpkgInstall: true

      #- name: Run vcpkg
      #  if: runner.os == 'Windows'
      #  uses: lukka/run-vcpkg@v11
      #  with:
      #    vcpkgDirectory: 'c:\vcpkg'
      #    vcpkgJsonGlob: 'vcpkg.json'
      #    runVcpkgInstall: true
      #- name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
      #  uses: lukka/run-cmake@latest
      #  with:
      #    configurePreset: 'ninja-multi-vcpkg'
      #    buildPreset: 'ninja-vcpkg-release'
      #    testPreset: 'test-release'
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}